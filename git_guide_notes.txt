/* Run git in windows */
1) Install msysgit
2) In Windows, run 'Git Bash' to start git CLI
3) Setting:
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
4) By default, all git repos on this computer will use the configuration above.

/* Create a repo */
1) Make an empty folder
2) Init this folder as a repo which can be managed by Git
	$ git init
	Initalized empty Git repository in /folder_name/.git/
3) Add files into repo
	Suggest using UTF-8 without BOM
	$ git add readme1.txt
	$ git add readme2.txt  /* add change to stage */
	$ git commit -m "comments" /* submit all info to branch */

 +--Work Area--+       +-Repo------------------- ---------------------+
 |             |       |                  Head-\                      |
 |             |       |  +- Stage ----+        |   +- Master ----+   |
 |             |       |  |            |        +---|->M          |   |
 |             |git add|  |            |            |  |          |   |
 | readme.txt -|-------|->| readme.txt | git commit |  |          |   |
 |             |       |  |            |----------->|  |\         |   |
 |             |       |  |            |            |  | \        |   |
 |             |       |  |            |            |  |  |       |   |
 |             |       |  +------------+            +-------------+   |
 +-------------+       +----------------------------------------------+

/* Show repo state */
	$ git status

/* Head Poiner */
	HEAD represent current version
	HEAD^ represent the last version
	HEAD~100 向上100个版本
	$ git reset --hard HEAD^ 回退到上一个版本

git diff HEAD -- readme.txt”命令可以查看⼯作区和版本库⾥⾯最新版本的区
	$ git diff

	$ git diff HEAD -- readme.txt”命令可以查看⼯作区和版本库⾥⾯最新版本的区别

	$ git reset

/* Show log */	
	$ git log -- 显示从最近到最远的提交日志

/* Show all history commands */
	$ git reflog

/* Concept of Checkout in Git */
	$ git checkout -- readme.txt  /* 让文件回到最近一次git commit或者git add时的状态 */
	可以用作丢弃某文件工作区的改动(如果没有git add)； 
	如果已经git add，则 git reset HEAD readme.txt

/* Remote repo */
	/* Associate local repo to repo in Github. Under local reponame */
	$ git remote add origian git@github.com:username/reponame.git
	/* Push all content in local repo to repo in Github */
	$ git push -u origin master
	/* Push new/addtional change into Github */
	$ git push origin master
	/* Clone repo from Github. Under work dictionary: */
	$ git clone git@github.com:username/reponame.git
	$ cd reponame

/* Create and merge branch */
	/* Create dev branch and swithed to dev branch */
	$ git checkout -b dev
	Switched to a new branch 'dev'
	Or:
	$ git branch dev  /* Create branch dev */
	$ git checkout dev  /* Switch to dev branch */
	Switched to branch 'dev'-b dev
    $ git checkout master /* SWitch back to master */
    $ git merge dev  /* merge dev into master */
    $ git branch -d dev /* Delete branch dev */
    $ git branch /* Show branch */
    * master
    $ git status /* Include the conflict information */
    $ git log --graph /* Show the branch and merge graph */
    $ git merge --no-ff -m "comments" dev /* no fast forward mode */
                  
                  HEAD-->master
                           |
                           v
    O--------O-------O-----O
                      \   /
                       \ /
                        O                   
                        ^
                        |
                       dev
/* Stash -- save working */


