/* Run git in windows */
1) Install msysgit
2) In Windows, run 'Git Bash' to start git CLI
3) Setting:
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
4) By default, all git repos on this computer will use the configuration above.

/* Create a repo */
1) Make an empty folder
2) Init this folder as a repo which can be managed by Git
	$ git init
	Initalized empty Git repository in /folder_name/.git/
3) Add files into repo
	Suggest using UTF-8 without BOM
	$ git add readme1.txt
	$ git add readme2.txt  /* add change to stage */
	$ git commit -m "comments" /* submit all info to branch */

 +--Work Area--+       +-Repo------------------- ---------------------+
 |             |       |                  Head-\                      |
 |             |       |  +- Stage ----+        |   +- Master ----+   |
 |             |       |  |            |        +---|->M          |   |
 |             |git add|  |            |            |  |          |   |
 | readme.txt -|-------|->| readme.txt | git commit |  |          |   |
 |             |       |  |            |----------->|  |\         |   |
 |             |       |  |            |            |  | \        |   |
 |             |       |  |            |            |  |  |       |   |
 |             |       |  +------------+            +-------------+   |
 +-------------+       +----------------------------------------------+

/* Show repo state */
	$ git status

/* Head Poiner */
	HEAD represent current version
	HEAD^ represent the last version
	HEAD~100 向上100个版本
	$ git reset --hard HEAD^ 回退到上一个版本

git diff HEAD -- readme.txt”命令可以查看⼯作区和版本库⾥⾯最新版本的区
	$ git diff

	$ git diff HEAD -- readme.txt”命令可以查看⼯作区和版本库⾥⾯最新版本的区别

	$ git reset

/* Show log */	
	$ git log -- 显示从最近到最远的提交日志

/* Show all history commands */
	$ git reflog

/* Concept of Checkout in Git */
	$ git checkout -- readme.txt  /* 让文件回到最近一次git commit或者git add时的状态 */
	可以用作丢弃某文件工作区的改动(如果没有git add)； 
	如果已经git add，则 git reset HEAD readme.txt

/* Remote repo */
	/* Associate local repo to repo in Github. Under local reponame */
	$ git remote add origian git@github.com:username/reponame.git
	/* Push all content in local repo to repo in Github */
	$ git push -u origin master /* 远程仓库的默认名称是origin */
	/* Push new/addtional change into Github */
	$ git push origin master /* push local master branch to remote */
	$ git push origin dev /* push local dev branch to remote */
	/* Clone repo from Github. Under work dictionary: */
	$ git clone git@github.com:username/reponame.git
	$ cd reponame

/* Create and merge branch */
	/* Create dev branch and swithed to dev branch */
	$ git checkout -b dev
	Switched to a new branch 'dev'
	Or:
	$ git branch dev  /* Create branch dev */
	$ git checkout dev  /* Switch to dev branch */
	Switched to branch 'dev'-b dev
	$ git checkout master /* SWitch back to master */
	$ git merge dev  /* merge dev into master */
	$ git branch -d dev /* Delete branch dev */
	$ git branch /* Show branch */
	* master
	$ git status /* Include the conflict information */
	$ git log --graph /* Show the branch and merge graph */
	$ git merge --no-ff -m "comments" dev /* no fast forward mode */
	              
	              HEAD-->master
	                       |
	                       v
	O--------O-------O-----O
	                  \   / 
	                   \ /
	                    O                   
	                    ^
	                    |
	                   dev

/* Stash -- 贮藏,暂存工作现场 */
	$ git stash /* Then git status will be clean */
	$ git stash list
	$ git stash pop /* Recover and remove the stash */

/* Show remote repo info */
	$ git remote -v /* The default name of remote repo is origin */
	$ git clone git@github.com:username/reponame.git
	$ cd reponame
	$ git checkout -b dev origin/dev /* 创建远程origin的dev分⽀到本地,分支名最好一致 */
	$ git commit -m "xxx"
	$ git push origin dev /* push to remove dev branch */

/* Resolve Conflict */
	$ git push origin dev
	/* Failure here */
	$ git branch --set-upstream dev origin/dev
	/* Branch dev set up to track remote branch dev from origin. */
	/* 指定本地dev分⽀与远程origin/dev分⽀的链接 */
	$ git pull
	/* Resolve Conflict Here */
	$ git commit -m "comments"
	$ git push origin dev

/* Tag */
	/* Tag的本质是指向某个commit的指针 */
	$ git branch
	* dev
	 master
	$ git checkout master
	Switched to branch 'master'
    $ git tag v1.0
    $ git tag 
    v1.0
    $ git tag v0.9 6224937 /* 6224937 is a commit ID */
    $ git tag
	v0.9
	v1.0
	$ git show v0.9
	/* 还可以创建带有说明的标签，⽤-a指定标签名，-m指定说明⽂字：*/
	$ git tag -a v0.1 -m "version 0.1 released" 3628164
	/* 删除标签 */
	$ git tag -d v0.1
	Deleted tag 'v0.1' (was e078af9)
	/* 推送标签到远程 */
	$ git push origin v1.0
	/* ⼀次性推送全部尚未推送到远程的本地标签：*/
	$ git push origin --tags
	/* 如果标签已经推送到远程，要删除远程标签就⿇烦⼀点，先从本地删除：*/
	$ git tag -d v0.9
	Deleted tag 'v0.9' (was 6224937)
	然后，从远程删除。删除命令也是push，但是格式如下：
	$ git push origin :refs/tags/v0.9

/* GitHub */
	/* 如何参与⼀个开源项目呢？你可以访问它的主页，点“Fork”,就在 */
	/* ⾃⼰的账号下克隆了⼀个bootstrap仓库，然后，从⾃⼰的账号下clone：*/
	/* 如果你希望官⽅库能接受你的修改，你就可以在GitHub上发起⼀个pull */
	/* request。 */

/* Open issues */
	What is the differenet between git pull and git fetch?


